useful when counting file content to overcome "argument list too long" issue.

ls -1 | grep -v 'wav' | wc -l


#detect blackframe thorugh ffmpeg:

if grep -q 'pblack' <<< $(ffmpeg -i $(ls *.MOV | head -1) -vframes 1 -y -vf blackframe -f null /dev/null 2>&1 | grep -m1 'pblack')
then 
echo yes
fi




#example files to create auto white balance through ffmpeg with the help of a haldc lut going through good old dcraw:
#dependency:
#ffmpeg
#dcraw
#exiftool

for f in *.MOV; do
#create the haldc file
ffmpeg -f lavfi -i haldclutsrc=8 -compression_algo raw -pix_fmt rgb24 -vframes 1 clut.tif
#create the reference tif
ffmpeg -i $f -compression_algo raw -pix_fmt rgb24 -vframes 1 reference.tif

#add needed dng tag. Will open up in dcraw but not in acr. Doesn´t matter, good old dcraw is all we need
exiftool -DNGVersion=1.4.0.0 -PhotometricInterpretation='Linear Raw' clut.tif reference.tif -overwrite_original

#now you have dcraw compatible dng /raw files
mv clut.tif clut.dng 
mv reference.tif reference.dng

#add auto white balance and dcraw -H 2
multiplier=$(dcraw -T -a -v c reference.dng 2>&1 | awk '/multipliers/ { print $2,$3,$4,$5; exit }')

#apply white balance and -H 2 to your haldc lut
dcraw -v -T -H 2 -r $multiplier -b 1 clut.dng

#mission accomplished, let´s remove the intermediate dng files
rm clut.dng reference.dng

#here we go. Let´s apply auto white balance and -H 2 onto our MOV file and export to some highres prores output
ffmpeg -i $f -i clut.tiff -filter_complex '[0][1] haldclut' -c:a copy -c:v prores_ks -profile:v 2 -pix_fmt yuv422p10 -color_primaries bt709 -color_trc bt709 -colorspace bt709 wb_$f
#done, remove the haldc tiff
rm clut.tiff
done




CR2 dualiso files:
https://www.magiclantern.fm/forum/index.php?topic=7139.msg207478#msg207478

#dependencies
#dcraw
#ffmpeg
#exiftool
#exiv2

exiv2 -ep3 -l . IMG_6706.CR2 && convert IMG_6706-preview3.jpg -resize 100%x25% -resize 100%x400% preview.jpg 

ffmpeg -f lavfi -i haldclutsrc=8 -compression_algo raw -pix_fmt rgb24 -vframes 1 clut.tif
#create the reference tif
ffmpeg -i preview.jpg -compression_algo raw -pix_fmt rgb24 -vframes 1 reference.tif

#add needed dng tag. Will open up in dcraw but not in acr. Doesn´t matter, good old dcraw is all we need
exiftool -DNGVersion=1.4.0.0 -PhotometricInterpretation='Linear Raw' clut.tif reference.tif -overwrite_original

#now you have dcraw compatible dng /raw files
mv clut.tif clut.dng 
mv reference.tif reference.dng

#add auto white balance
multiplier=$(dcraw -T -a -v c reference.dng 2>&1 | awk '/multipliers/ { print $2,$3,$4,$5; exit }')

#apply white balance and -H 2 to your haldc lut
dcraw -v -T -H 2 -r $multiplier clut.dng

#here we go. Let´s apply auto white balance
ffmpeg -i preview.jpg -i clut.tiff -filter_complex '[0][1] haldclut' wb_preview.jpg
#done

exiftool IMG_6706.CR2 '-PreviewImage<=wb_preview.jpg' # -overwrite_original

#trash files
rm preview.jpg wb_preview.jpg IMG_6706-preview3.jpg clut.tiff clut.dng reference.dng

#ffmpeg median script:
https://www.magiclantern.fm/forum/index.php?topic=15774.msg208285#msg208285
ffmpeg -i Input.mp4 -vf removegrain=4,removegrain=4,removegrain=4,removegrain=4,removegrain=4,unsharp=9:9:1.0:9:9:0 -c:v libx264 -preset ultrafast -crf 10 Output.mov





https://github.com/ilia3101/MLV-App/commit/43a35fa1be4386f5b12d24a02e261b7ac4d17f89#commitcomment-31137315

color matrices in Mlv App:
static const double xyz_to_rgb[] = {
     3.2404542, -1.5371385, -0.4985314,
    -0.9692660,  1.8760108,  0.0415560,
     0.0030,  0.0136,  0.9834
};

/* XYZ to Cone space (LMS) */
static const double ciecam02[] = {
    3.2404542, -1.5371385, -0.4985314,
   -0.7036,  1.8760108,  0.0415560,
    0.0030,  0.0136,  0.9834
};


EDIT:
This seems even closer to original colors without the blue corruption issue:

static const double xyz_to_rgb[] = {
     3.2404542, -1.5371385, -0.4985314,
    -0.9692660,  1.8760108,  0.0415560,
     0.0030,  -0.0536,  0.9834
};

/* XYZ to Cone space (LMS) */
static const double ciecam02[] = {
    3.2404542, -1.5371385, -0.4985314,
   -0.7036,  1.8760108,  0.0415560,
    0.0030,  0.0536,  0.9834
};


Good compromise?

static const double xyz_to_rgb[] = {
     3.2404542, -1.7171385, -0.4985314,
    -0.9692660,  1.8760108,  0.0415560,
     0.0030,  -0.0536,  0.9834
};

/* XYZ to Cone space (LMS) */
static const double ciecam02[] = {
    3.0404542, -1.5371385, -0.4985314,
   -0.7036,  1.8760108,  0.0415560,
    0.0030,  0.0536,  0.9834
};





Fix from a1ex through IRC property registry:

static struct menu_entry crop_hack_menus[] = {
    {
        .name = "Movie crop mode",
        .update = movie_crop_hack_display,
        .select = movie_crop_hack_toggle,
        .max = 1,
        .priv = &video_mode_crop,
        .help   = "Enables 600D movie crop-mode",
        .depends_on = DEP_MOVIE_MODE,
    },
};

void crop_mode_hack_init()
{
qprintf("fixing it...\n");
video_mode[0] = 0;  // crop
video_mode[1] = 0;  // res index
video_mode[2] = 24; // fps
video_mode[3] = 12; // gop
video_mode[4] = 0;  // zoom
prop_request_change(PROP_VIDEO_MODE, video_mode, 0);
menu_add( "Movie", crop_hack_menus, COUNT(crop_hack_menus) );
}

INIT_FUNC(__FILE__, crop_mode_hack_init);

#endif


